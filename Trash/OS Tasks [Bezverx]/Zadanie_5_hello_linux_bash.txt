Все студенты сдают работу на портал в одно задание для всех групп и ВФ
Имя файла скрипта - группа_Фамилия_Вариант
Варианты для выполнения см. в рейтинге


Задание по вариантам

Написать баш-скрипт, который выполняет следующую задачу:

    1. Найти в заданной директории и всех ее поддиректориях все файлы с заданным расширением и записывает их имена в заданный файл.
        Аргументы: 
            1. директория, в которой ведется поиск 
            2. расширение файлов 
            3. путь к файлу, в который будет записан список найденных файлов
        Например,
            ./foo.sh /usr txt ~/list.txt

    2. Создать в текущей директории структуру папок вида
        a/
            b/
                c/
        с заданной глубиной (т.е. названия папок - буквы латинского алфавита) и копирует в каждую из созданных папок заданный файл, названием которого должно быть число - номер копии. 
        Аргументы: 
            1. максимальная глубина(ограничение - от 1 до 26 включительно) 
            2. копируемый файл
        Например,
            ./foo.sh 3 ./bar/baz.txt
        В результате должно получиться что-то такое:
        a/
            1.txt
            b/
                2.txt
                c/
                    3.txt

    3. Найти в заданной директории файлы, содержащие заданную подстроку(не в названии файла, а в его содержимом), и выводит полные пути к ним на экран
        Аргументы: 
            1. исходная директория поиска
            2. искомая подстрока
        Например,
            ./foo.sh /var/log "Hello world"

    4. Найти в заданной директории файлы по заданной части названия и записывает результаты в заданный файл
        Аргументы: 
            1. исходная директория поиска
            2. часть названия, по которой ищутся файлы
            3. путь к выходному файлу
        Например,
            ./foo.sh /home file ~/out.txt

    5. Вывести на экран глубину пути к директории относительно корневой директории, из которой вызывается скрипт(а не из той, где находится сам файл со скриптом). 
    	Например, если при вызове скрипта вы находитесь в директории /usr/local/src, в результате должно получиться число 3

    6. Вывести PIDы(и ничего другого) всех процессов по заданной части имени процессов
        Аргументы: 
            1. часть названия, по которой ищутся процессы
        Например,
            ./foo.sh firefox
        должно выводить на экран список PIDов процессов, в названии которых есть слово firefox

    7. Найти все комментарии(в том числе и многострочные) в заданном .cpp файле(проверить расширение файла) и вывести их в заданный выходной файл
        Аргументы: 
            1. путь ко входному файлу .cpp
            2. путь к выходному файлу
        Например,
            ./foo.sh test/hello.cpp out.txt
        должно выводить все комментарии C/C++ из файла test/hello.cpp в файл out.txt

    8. Вывести на экран названия всех классов, определенных в заданном файле с программой на C++. Необходимо также проверить расширение файла и выдать сообщение об ошибке, если оно не соответствует расширениям файлов с кодом на C++.
        Аргументы: 
            1. путь ко входному файлу .cpp
        Например,
            ./foo.sh test.cpp

    9. Создать структуру папок вида 
            YYYY/MM/DD/hh/mm/ss
        где DD/MM/YYYY - время и дата вызова скрипта, hh:mm:ss - любая возможная комбинация часов/минут/секунд. Т.е. в папке YYYY/MM/DD будут 24 подпапки, в каждой из которых еще по 60 подпапок, в каждой из которых еще по 60

    10. Выводить на экран каждый N-ый символ строки, в которую записаны подряд числа Фибоначчи по порядку, заданной длины M. Считаем, что последовательность начинается с нуля и единицы: "01123581321...")  (Под длиной подразумевается не количество чисел, используемое для построения этой строки, а количество символов в ней) N и M передаются в качестве аргумента:
        Аргументы: 
            1. N
            2. M 
        Например,
            ./fib.sh 3 20
        должно вывести "153351". (т.е. выводим из нее каждый 3-й символ из "строки Фибоначчи" длиной 20)

    11. Написать скрипт, который выводит подряд первые N букв названий каждой субдиректории заданной директории.
        Аргументы: 
            1. исходная директория
            2. N
        Например,
            ./foo /bin 3

    12. Написать скрипт, который удаляет из текущей директории все текстовые файлы с четным количеством строк

    13. Вывести на экран пути к файлам внутри заданной директории(и ее субдиректориях), в которых есть ровно одна директория с именем, состоящим только из цифр
        Аргументы: 
            1. исходная директория
        Например,
            ./foo.sh /bin

    14. Для заданного текстового файла попарно поменять местами строки с номерами 2*i+1 и 2*i. Если в файле всего нечетное количество строк, то самую последнюю строку поместить в начало файла после завершения всех обменов. Никаких дополнительных файлов в процессе работы скрипта создаваться не должно, на экран ничего выводить не нужно.
        Аргументы: 
            1. входной файл
        Например,
            ./foo.sh test.txt

    15. Вывести на экран заданный интервал(задается двумя числами - границами интервала, нужна проверка введенных значений - от 0 до 127) таблицы ASCII. В каждой строке - номер символа и сам символ через пробел. Насчет непечатных не заморачивайтесь
        Аргументы: 
            1. начало интервала таблицы (включительно)
            2. конец интервала таблицы (включительно)
        Например,
            ./foo.sh 50 60
        должно выводить
            50 2
            51 3
            52 4
            53 5
            54 6
            55 7
            56 8
            57 9
            58 :
            59 ;
            60 <

    16. Разложить заданное число на простые множители и вывести их сумму на экран
        Аргументы: 
            1. раскладываемое число
        Например,
            ./foo.sh 120
        должно вывести 14 (2+2+2+3+5)

    17. Рекурсивно запускать самого себя с заданной глубиной (Т.е. процесс скрипта запускает второй процесс того же скрипта, который, в свою очередь, запускает третий процесс этого же скрипта и т.д.). Каждый запущенный процесс должен через пробел вывести свой PID и свой порядковый номер запуска
        Аргументы: 
            1. общее количество запусков
        Например,
            ./rec.sh 5

    18. Разбить заданное предложение на слова, выводить заданное количество слов с заданным интервалом времени(в секундах) по одному.
        Аргументы: 
            1. разбиваемая строка
            2. количество выводимых на экран слов
            3. интервал  времени между выводами на экран слов
        Например,
            ./split.sh 'a b c d e' 3 20
        должно вывести 'a' через 20 секунд после запуска, затем 'b' еще через 20 секунд, затем 'c' еще через 20 секунд. 
        Если слов меньше, чем введенное количество повторений, то выводить их циклически. 
        Например, 
        	./split.sh 'qq ww ee' 10 5 
        должно выводить на экран строки 'qq', 'ww', 'ee', 'qq', 'ww'

    19. Сгенерировать случайное число от 1 до 100 и запрашивать ввод с клавиатуры, пока пользователь не введет загаданное число. Выводить номер и результат каждой попытки на экран.
        Можно также отвечать пользователю, больше или меньше загаданного числа, которые он вводит, чтобы ускорить процесс.

    20. Сыграть с пользователем в Быки и Коровы. (Похоже на предыдущий вариант - скрипт загадывает, пользователь отгадывает)

    21. Выводить раз в секунду на экран количество времени, прошедшее с момента запуска скрипта, пока не будет нажата клавиша Enter.

    22. Проверить, является ли заданная строка корректным IP-адресом, и вывести на экран соответствующее сообщение. Допускается также указание порта через двоеточие после адреса
        Не забудьте проверить адрес и порт на корректность!
        Аргументы: 
            1. проверяемая строка
        Например,
            ./foo.sh 127.0.0.1:80
        должно вывести сообщение "OK(IP:Port)"
            ./foo.sh 127.0.0.1
        должно вывести сообщение "OK(IP)"
            ./foo.sh u8w7kjne
        должно вывести сообщение "Error"

    23. Найти самый большой и самый маленький (по объему занимаемой памяти) файл с заданным расширением в заданной директории(включая поддиректории)
        Аргументы: 
            1. расширение проверямых файлов
            2. исходная директория поиска
        Например,
            ./findmaxfile.sh .cfg /usr
        должно выводить что-то вроде:
        	max: /usr/local/aaa.log
        	min: /usr/shared/bbb.ttx

    24. Найти в заданной директории поддиректорию с максимальным количеством файлов внутри(только файлы в самой директории, а не в ее субдиректориях).
        Включить в поиск саму заданную директорию.
        Вывести на экран полный путь к ней.
        Если папок с максимальным количеством файлов несколько, вывести любую из них.
        Аргументы: 
            1. исходная директория
        Например, для структуры папок
        a/
            aa/
                aaa/
                    1.txt
                    2.txt
                    3.txt
                aab/
                    4.c
                    4.h
                5.txt
                6.txt
                7.txt
                8.txt
            ab/
                aba/
                9.cpp
            ac/
                aca/
                    10.ini
                    11.cfg
                12.py
            1.txt
            2.c
        Вызов вашего скрипта
            ./foo.sh a
        должен вывести что-то вроде следующей строки(если папка a находится в домашней директории пользователя zzz)
            /home/zzz/a/aa

    25. Проверить на корректность введенную последовательность скобок. Скобки могут быть трех типов - круглые, квадратные и фигурные. Последовательность считается корректной, когда каждая открывающая скобка закрывается скобкой того же вида. При этом скобки могут вкладываться друг в друга
        Аргументы: 
            1. строка - проверямая последовательность скобок
    	Например,
    		./foo.sh '([]{()})'
    	должно выдать 'OK' (последовательность корректна), а
    		./foo.sh '([}{()])'
    	должно выдать 'Error' (последовательность некорректна, т.к. квадратная скобка закрывается фигурной)

    26. Поменять местами два файла.
        Аргументы: 
            1. путь к первому файлу
            2. путь ко второму файлу
    	Например,
    		./swap.sh /home/aaa/foo.txt /usr/local/bar/baz.txt

    27. Сгенерировать случайное число от 0 до 5 и вывести его на экран. Если оно окажется равным равно 0, скрипт должен убить собственный процесс (т.е. выполнить команду, которая принудительно завершит процесс, а не завершиться самому). В противном случае подождать 2 секунды и повторить всю процедуру заново. Соответственно, повторять, пока скрипт в итоге не убьет сам себя